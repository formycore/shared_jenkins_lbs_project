- pipeline with scm
- under 
Dashboard
Manage Jenkins
System
Project Repository
- install these plugins
    - SonarQube Generic Coverage Plugin
    - SonarQube Scanner for Jenkins
    - Quality Gates Plugin 
    - Sonar Quality Gates Plugin Version 
    
- first create a file in shared lib repo
******************************************************************************************************
    - gitCheckout.groovy
    def call(Map stageParams){
	checkout([
		$class: 'GitSCM',
		branches: [[name: stageParams.branch]],
		userRemoteConfigs: [[ url: stageParams.url ]]
		])
    }
    - git push to repo
    - under java app
    stages {
        stage ('Git Checkout'){
            when { expression {  params.action == 'create' } }
            steps {
                    // git 'https://github.com/formycore/shared_jenkins_lbs_project.git'
                    // name of the function is gitCheckout
                    // we have passed 2 variables github branch and url
                    gitCheckout (
                        branch: "master",
                        // url for the java app
                        url: "https://github.com/formycore/shared_jenkins_lbs_project.git"
                    )
                
            }
        }
        - git push to repo
-----------------------------------------------------------------------------------------------------
under the share lib repo
mvnTest 
def call () {
    sh 'mvn test'
}
- git push to repo
- under java app
        stage ('Mvn test'){
            when { expression {  params.action == 'create' } }

            steps {
                script {
                mvnTest() // calling the groovy function 
                }
            }
        }
- git push to repo
-----------------------------------------------------------------------------------------------------
- under the share lib repo
mvnIntegrationTest.groovy
def call () {
    sh 'mvn integration-test'
}
- git push to repo
- under java app
        stage ('Mvn integration test'){
            when { expression {  params.action == 'create' } }

            steps {
                script {
                mvnIntegrationTest() // calling the groovy function 
                }
            }
        }
- git push to repo
-----------------------------------------------------------------------------------------------------
- under the share lib repo
staticCodeAnalysis.groovy
def call (credentialsId) {
    withSonarQubeEnv(credentialsId: credentialsId) { // this is generated by the pipeline syntax
    // here we are passing the credentialsId as a parameter to the function 
    sh 'mvn clean package sonar:sonar'
}
    
}
- git push to repo
- under java app
        stage ('Static code analysis') {
            when { expression {  params.action == 'create' } }
            steps {
                script {
                    def SonarQubecredentialsId = 'sonar-api'
                    staticCodeAnalysis(SonarQubecredentialsId) // calling the groovy function
                    // SonarQubecredentialsId is the variable which we are passing to the function
                    // with def SonarQubecredentialsId = 'sonar-api' we are assigning the value to the variable
                }
            }
        } }
        }
- git push to repo
-----------------------------------------------------------------------------------------------------
- under the share lib repo
QualityGateStatus.groovy
def call (credentialsId) {
    waitForQualityGate abortPipeline: false, credentialsId: credentialsId
}
- git push to repo
- under java app
        stage ('Quality gate status') {
            when { expression {  params.action == 'create' } }
            steps {
                script {
                    def SonarQubecredentialsId = 'sonar-api'
                    QualityGateStatus(SonarQubecredentialsId) // calling the groovy function
                    // SonarQubecredentialsId is the variable which we are passing to the function
                    // with def SonarQubecredentialsId = 'sonar-api' we are assigning the value to the variable
                }
            }
        } }
        }
- git push to repo
-----------------------------------------------------------------------------------------------------
- under the share lib repo
mvnBuild.groovy
def call () {
    sh 'mvn clean install'
}
- git push to repo
- under java app
        stage ('Maven Build') {
            when { expression {  params.action == 'create' } }
            steps {
                script {
                    mvnBuild()
                }
            }
        }
- git push to repo



******************************************************************************************************
- name the git repo from which we are using the shared library
- now the game of variables comes to place
- ALL THE GROOVY SHOULD BE UNDER THE VARS FOLDER ONLY
- now we are adding parameters here
- after parameteres create a new pipeline
******************************************************************************************************
- now for the sonarqube 
    under shared lib repo (staticCodeAnalysis)
    def call () {
        withSonarQubeEnv(credentialsId: 'sonar-api') {
            sh 'mvn clean package sonar:sonar'
            }
        }
    - the sonar-api value will be different for every other project,so we need to change the value
    of the sonar-api for each time 
    def call (credentialsId) {
        withSonarQubeEnv(credentialsId: credentialsId) {
            sh 'mvn clean package sonar:sonar'
            }
        }
    - UNDER THE JAVA APP
      def SonarQubecredentialsId = 'sonar-api' ( this is generated by the pipeline syntax)
    - staticCodeAnalysis(SonarQubecredentialsId)
******************************************************************************************************
- Now the static quality gate status check
